ThriveBot Project Setup Instructions

## Dependencies

### Backend Dependencies (Node.js)
- express>=4.21.2
- cors>=2.8.5
- dotenv>=16.4.7
- @prisma/client>=6.5.0
- prisma>=6.5.0

### Backend Development Dependencies
- nodemon>=3.1.9
- concurrently>=9.1.2

### Frontend Dependencies (React)
- react>=19.0.0
- react-dom>=19.0.0
- vite>=6.2.0
- @vitejs/plugin-react>=4.3.4

### Python Backend Dependencies (Optional)
- flask==2.0.1
- flask-cors==3.0.10
- python-dotenv==0.19.0
- openai==0.27.0
- flask-sqlalchemy==2.5.1
- psycopg2-binary==2.9.3
- gunicorn==20.1.0

## Setup Instructions

1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd thrive-website
   ```

2. Install Node.js dependencies:
   ```bash
   # Install server dependencies
   npm install
   
   # Install client dependencies
   cd client
   npm install
   cd ..
   ```

3. Set up environment variables:
   - Create a `.env` file in the project root:
     ```
     PORT=4000
     DATABASE_URL=postgresql://username:password@localhost:5432/mydb?schema=public
     ```
   - Create a `.env` file in the client directory:
     ```
     REACT_APP_API_URL=http://localhost:4000
     ```

4. Database setup:
   - Install PostgreSQL if not already installed
   - Create a database and user:
     ```sql
     CREATE USER thriveadmin WITH PASSWORD 'wellbeing';
     CREATE DATABASE mydb;
     GRANT ALL PRIVILEGES ON DATABASE mydb TO username;
     ```
   - Run Prisma migrations:
     ```bash
     npx prisma migrate dev
     ```

5. Running the application:
   ```bash
   # Run both frontend and backend concurrently
   npm run dev
   
   # Or run them separately:
   # Backend only
   npm run server
   
   # Frontend only
   npm run client
   ```

6. Access the application:
   - Frontend: http://localhost:5173 (Vite default port)
   - Backend API: http://localhost:4000

## Project Structure
- `/client`: React frontend built with Vite
- `/server`: Node.js backend with Express
- `/server/prisma`: Database schema and migrations
- `/server/controllers`: API controllers
- `/server/models`: Data models
- `/server/routes`: API routes

## Common Issues
- If you see "Failed to add user" errors, check:
  - Database connection (verify PostgreSQL is running)
  - Environment variables are set correctly
  - Backend server is running
  - CORS is properly configured
